{"ast":null,"code":"import { __assign, __spreadArrays } from \"tslib\";\nimport { isRealNumber, pick } from '../../utils';\nimport { transformDataToNodeLinkData } from '../../utils/data';\nimport { sankeyLayout } from './layout';\nimport { cutoffCircle } from './circle';\n/**\n * 是否是 node-link 类型的数据结构\n * @param dataTyp\n * @returns\n */\n\nfunction isNodeLink(dataType) {\n  return dataType === 'node-link';\n}\n\nexport function getNodeWidthRatio(nodeWidth, nodeWidthRatio, width) {\n  return isRealNumber(nodeWidth) ? nodeWidth / width : nodeWidthRatio;\n}\nexport function getNodePaddingRatio(nodePadding, nodePaddingRatio, height) {\n  return isRealNumber(nodePadding) ? nodePadding / height : nodePaddingRatio;\n}\n/**\n * 将桑基图配置经过 layout，生成最终的 view 数据\n * @param options\n * @param width\n * @param height\n */\n\nexport function transformToViewsData(options, width, height) {\n  var dataType = options.dataType,\n      data = options.data,\n      sourceField = options.sourceField,\n      targetField = options.targetField,\n      weightField = options.weightField,\n      nodeAlign = options.nodeAlign,\n      nodeSort = options.nodeSort,\n      nodePadding = options.nodePadding,\n      nodePaddingRatio = options.nodePaddingRatio,\n      nodeWidth = options.nodeWidth,\n      nodeWidthRatio = options.nodeWidthRatio,\n      nodeDepth = options.nodeDepth,\n      _a = options.rawFields,\n      rawFields = _a === void 0 ? [] : _a;\n  var sankeyLayoutInputData;\n\n  if (!isNodeLink(dataType)) {\n    sankeyLayoutInputData = transformDataToNodeLinkData(cutoffCircle(data, sourceField, targetField), sourceField, targetField, weightField, rawFields);\n  } else {\n    sankeyLayoutInputData = data;\n  } // 3. layout 之后的数据\n\n\n  var _b = sankeyLayout({\n    nodeAlign: nodeAlign,\n    nodePadding: getNodePaddingRatio(nodePadding, nodePaddingRatio, height),\n    nodeWidth: getNodeWidthRatio(nodeWidth, nodeWidthRatio, width),\n    nodeSort: nodeSort,\n    nodeDepth: nodeDepth\n  }, sankeyLayoutInputData),\n      nodes = _b.nodes,\n      links = _b.links; // 4. 生成绘图数据\n\n\n  return {\n    nodes: nodes.map(function (node) {\n      return __assign(__assign({}, pick(node, __spreadArrays(['x', 'y', 'name'], rawFields))), {\n        isNode: true\n      });\n    }),\n    edges: links.map(function (link) {\n      return __assign(__assign({\n        source: link.source.name,\n        target: link.target.name,\n        name: link.source.name || link.target.name\n      }, pick(link, __spreadArrays(['x', 'y', 'value'], rawFields))), {\n        isNode: false\n      });\n    })\n  };\n}","map":{"version":3,"sources":["../../../src/plots/sankey/helper.ts"],"names":[],"mappings":"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","sourcesContent":["import { isRealNumber, pick } from '../../utils';\nimport { transformDataToNodeLinkData } from '../../utils/data';\nimport { Data } from '../../types';\nimport { sankeyLayout, SankeyLayoutInputData } from './layout';\nimport { cutoffCircle } from './circle';\nimport { SankeyOptions } from './types';\n\n/**\n * 是否是 node-link 类型的数据结构\n * @param dataTyp\n * @returns\n */\nfunction isNodeLink(dataType: string) {\n  return dataType === 'node-link';\n}\n\nexport function getNodeWidthRatio(nodeWidth: number, nodeWidthRatio: number, width: number) {\n  return isRealNumber(nodeWidth) ? nodeWidth / width : nodeWidthRatio;\n}\n\nexport function getNodePaddingRatio(nodePadding: number, nodePaddingRatio: number, height: number) {\n  return isRealNumber(nodePadding) ? nodePadding / height : nodePaddingRatio;\n}\n\n/**\n * 将桑基图配置经过 layout，生成最终的 view 数据\n * @param options\n * @param width\n * @param height\n */\nexport function transformToViewsData(options: SankeyOptions, width: number, height: number) {\n  const {\n    dataType,\n    data,\n    sourceField,\n    targetField,\n    weightField,\n    nodeAlign,\n    nodeSort,\n    nodePadding,\n    nodePaddingRatio,\n    nodeWidth,\n    nodeWidthRatio,\n    nodeDepth,\n    rawFields = [],\n  } = options;\n\n  let sankeyLayoutInputData: unknown;\n\n  if (!isNodeLink(dataType)) {\n    sankeyLayoutInputData = transformDataToNodeLinkData(\n      cutoffCircle(data as Data, sourceField, targetField),\n      sourceField,\n      targetField,\n      weightField,\n      rawFields\n    );\n  } else {\n    sankeyLayoutInputData = data;\n  }\n\n  // 3. layout 之后的数据\n  const { nodes, links } = sankeyLayout(\n    {\n      nodeAlign,\n      nodePadding: getNodePaddingRatio(nodePadding, nodePaddingRatio, height),\n      nodeWidth: getNodeWidthRatio(nodeWidth, nodeWidthRatio, width),\n      nodeSort,\n      nodeDepth,\n    },\n    sankeyLayoutInputData as SankeyLayoutInputData\n  );\n\n  // 4. 生成绘图数据\n  return {\n    nodes: nodes.map((node) => {\n      return {\n        ...pick(node, ['x', 'y', 'name', ...rawFields]),\n        isNode: true,\n      };\n    }),\n    edges: links.map((link) => {\n      return {\n        source: link.source.name,\n        target: link.target.name,\n        name: link.source.name || link.target.name,\n        ...pick(link, ['x', 'y', 'value', ...rawFields]),\n        isNode: false,\n      };\n    }),\n  };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}