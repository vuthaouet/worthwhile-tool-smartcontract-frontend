[{"/home/vuthaouet/blockchain/worthwhile-tool-smartcontract-frontend/src/index.js":"1","/home/vuthaouet/blockchain/worthwhile-tool-smartcontract-frontend/src/App.js":"2","/home/vuthaouet/blockchain/worthwhile-tool-smartcontract-frontend/src/reportWebVitals.js":"3","/home/vuthaouet/blockchain/worthwhile-tool-smartcontract-frontend/src/test.js":"4","/home/vuthaouet/blockchain/worthwhile-tool-smartcontract-frontend/src/api/test2.js":"5","/home/vuthaouet/blockchain/worthwhile-tool-smartcontract-frontend/src/api/wortwhile.js":"6","/home/vuthaouet/blockchain/worthwhile-tool-smartcontract-frontend/src/api/index.js":"7","/home/vuthaouet/blockchain/worthwhile-tool-smartcontract-frontend/src/api/upload.js":"8"},{"size":500,"mtime":1636873707242,"results":"9","hashOfConfig":"10"},{"size":669,"mtime":1639990914954,"results":"11","hashOfConfig":"10"},{"size":362,"mtime":1636873707242,"results":"12","hashOfConfig":"10"},{"size":37,"mtime":1639980487907,"results":"13","hashOfConfig":"10"},{"size":6378,"mtime":1638638402293,"results":"14","hashOfConfig":"10"},{"size":652,"mtime":1638626347508,"results":"15","hashOfConfig":"10"},{"size":648,"mtime":1638603084441,"results":"16","hashOfConfig":"10"},{"size":17507,"mtime":1640673414852,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"1s6ap9j",{"filePath":"21","messages":"22","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"20"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"20"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"20"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},"/home/vuthaouet/blockchain/worthwhile-tool-smartcontract-frontend/src/index.js",[],["39","40"],"/home/vuthaouet/blockchain/worthwhile-tool-smartcontract-frontend/src/App.js",["41","42","43","44","45"],"import React, {useEffect, useState} from 'react';\nimport { Button } from 'antd';\nimport './App.css';\nimport ReactDOM from \"react-dom\";\nimport MyUpload from \"./api/upload\"\nimport PicturesWall from \"./test\";\nimport Demo from \"./api/test2\";\n\nfunction App() {\n    const [currentTime, setCurrentTime] = useState(0);\n\n    useEffect(() => {\n        fetch('/time').then(res => res.json()).then(data => {\n            setCurrentTime(data.time);\n        });\n    }, []);\n\n    return (\n        <div className=\"App\" style={{width: '80%',margin : 'auto'}}>\n            <h1>Smart Contract Security Analysis.</h1>\n            <MyUpload/>\n        </div>\n    );\n\n\n\n}\n\n\nexport default App;","/home/vuthaouet/blockchain/worthwhile-tool-smartcontract-frontend/src/reportWebVitals.js",[],"/home/vuthaouet/blockchain/worthwhile-tool-smartcontract-frontend/src/test.js",["46"],"import { Pie } from '@antv/g2plot';\n\n","/home/vuthaouet/blockchain/worthwhile-tool-smartcontract-frontend/src/api/test2.js",["47","48","49","50","51","52","53","54","55","56"],"import React, {useState} from 'react';\nimport 'antd/dist/antd.css';\nimport '../index.css';\nimport {\n    Form,\n    Select,\n    InputNumber,\n    Switch,\n    Radio,\n    Slider,\n    Button,\n    Upload,\n    Rate,\n    Checkbox,\n    Row,\n    Col, Input,\n} from 'antd';\n\nimport {  InboxOutlined } from '@ant-design/icons';\nimport {Option} from \"antd/es/mentions\";\nimport axios from \"axios\";\nimport {combine_results_api, uploadfile, wortwhile} from \"./wortwhile\";\n\nconst baseUrl = \"http://localhost:5000\";\nconst formItemLayout = {\n    labelCol: {\n        span: 6,\n    },\n    wrapperCol: {\n        span: 14,\n    },\n};\n\nconst normFile = (e) => {\n    console.log('Upload event:', e);\n\n    if (Array.isArray(e)) {\n        return e;\n    }\n\n    return e && e.fileList;\n};\n\nconst Demo = () => {\n    const onFinish = (values) => {\n        submitForm(values)\n    };\n    const submitForm = async (values) => {\n        const formData = new FormData();\n        formData.append(\"type\", values['type']);\n        formData.append(\"project_name\", values[\"project_name\"]);\n        formData.append(\"list_tool\", values[\"list_tool\"]);\n        const data = {\n            type: values['type'],\n            project_name: values[\"project_name\"]\n        }\n        values[\"file\"].map((file) => {\n            formData.append(\"file\", file.originFileObj);\n            // data.file (\"file\", file.originFileObj);\n        });\n        console.log(\"formData.values()\")\n        console.log(...formData)\n        // let check = uploadfile(formData.)\n        let res = await axios.post(`${baseUrl}${'/wortwhile/uploadfile'}`, formData)\n            .then((res) => {\n                return {\n                    success: true,\n                    data: res.data,\n                }\n            })\n            .catch((err) => alert(\"File Upload Error\"));\n        if (res ){\n            console.log(res)\n            let check = await wortwhile(res.data)\n            await combine_results_api(values[\"project_name\"])\n        }\n    };\n\n    return (\n        <Form\n            name=\"validate_other\"\n            {...formItemLayout}\n            onFinish={onFinish}\n            enctype=\"multipart/form-data\"\n        >\n            <Form.Item\n                {...formItemLayout}\n                name=\"project_name\"\n                label=\"Your project name\"\n                rules={[\n                    {\n                        required: true,\n                        message: 'Please input your project name',\n                    },\n                ]}\n            >\n                <Input placeholder=\"Please input your project name\" />\n            </Form.Item>\n            <Form.Item name=\"list_tool\" label=\"Tool\"\n                       rules={[\n                           {\n                               required: true,\n                               message: 'Please chooose tool',\n                           },\n                       ]}>\n                <Checkbox.Group>\n                    <Row>\n                        <Col span={4}>\n                            <Checkbox\n                                value=\"mythril\"\n                                style={{\n                                    lineHeight: '32px',\n                                }}\n                            >\n                                Mythril\n                            </Checkbox>\n                        </Col>\n                        <Col span={8}>\n                            <Checkbox\n                                value=\"slither\"\n                                style={{\n                                    lineHeight: '32px',\n                                }}\n                            >\n                                Slither\n                            </Checkbox>\n                        </Col>\n                        <Col span={8}>\n                            <Checkbox\n                                value=\"oyente\"\n                                style={{\n                                    lineHeight: '32px',\n                                }}\n                            >\n                                Oyente\n                            </Checkbox>\n                        </Col>\n                        <Col span={8}>\n                            <Checkbox\n                                value=\"honeybadger\"\n                                style={{\n                                    lineHeight: '32px',\n                                }}\n                            >\n                                Honeybadger\n                            </Checkbox>\n                        </Col>\n\n                    </Row>\n                </Checkbox.Group>\n            </Form.Item>\n            <Form.Item\n                name=\"type\"\n                label=\"type\"\n                hasFeedback\n                rules={[\n                    {\n                        required: true,\n                        message: 'Please input your type',\n                    },\n                ]}\n            >\n                <Select placeholder=\"Please input your type\">\n                    <Option value=\"file\">File</Option>\n                    <Option value=\"repo\">Repo</Option>\n                </Select>\n            </Form.Item>\n            <Form.Item\n                {...formItemLayout}\n                name=\"linkRepo\"\n                label=\"Link Repo\"\n            >\n                <Input placeholder=\"Please input link repo\" />\n            </Form.Item>\n            <Form.Item label=\"file\">\n                <Form.Item name=\"file\" valuePropName=\"fileList\" getValueFromEvent={normFile} noStyle>\n                    <Upload.Dragger name=\"files\" beforeUpload={() => false} fileList={normFile}>\n                        <p className=\"ant-upload-drag-icon\">\n                            <InboxOutlined />\n                        </p>\n                        <p className=\"ant-upload-text\">Click or drag file to this area to upload</p>\n                        <p className=\"ant-upload-hint\">Support for a single or bulk upload.</p>\n                    </Upload.Dragger>\n                </Form.Item>\n            </Form.Item>\n\n            <Form.Item\n                wrapperCol={{\n                    span: 12,\n                    offset: 6,\n                }}\n            >\n                <Button type=\"primary\" htmlType=\"submit\" >\n                    Submit\n                </Button>\n            </Form.Item>\n        </Form>\n    );\n};\n\nexport default Demo","/home/vuthaouet/blockchain/worthwhile-tool-smartcontract-frontend/src/api/wortwhile.js",[],"/home/vuthaouet/blockchain/worthwhile-tool-smartcontract-frontend/src/api/index.js",[],"/home/vuthaouet/blockchain/worthwhile-tool-smartcontract-frontend/src/api/upload.js",["57","58","59","60","61","62","63","64","65","66","67"],"import React, {useState} from 'react';\nimport ReactDOM from 'react-dom'\nimport 'antd/dist/antd.css';\nimport '../index.css';\nimport { Pie, measureTextWidth } from '@antv/g2plot';\nimport {\n    Form,\n    Select,\n    InputNumber,\n    Switch,\n    Radio,\n    Slider,\n    Button,\n    Upload,\n    Rate,\n    Checkbox,\n    Row,\n    Col, Input,\n} from 'antd';\n\nimport {InboxOutlined} from '@ant-design/icons';\nimport {Option} from \"antd/es/mentions\";\nimport axios from \"axios\";\nimport {combine_results_api, uploadfile, wortwhile} from \"./wortwhile\";\n\nconst backend_folder = \"/home/vuthaouet/blockchain/worthwhile-tool-smartcontract-backend/data/\"\nconst baseUrl = \"http://localhost:5000\";\nconst formItemLayout = {\n    labelCol: {\n        span: 6,\n    },\n    wrapperCol: {\n        span: 14,\n    },\n};\n\nconst normFile = (e) => {\n    console.log('Upload event:', e);\n\n    if (Array.isArray(e)) {\n        return e;\n    }\n\n    return e && e.fileList;\n};\nfunction renderStatistic(containerWidth, text, style) {\n    const { width: textWidth, height: textHeight } = measureTextWidth(text, style);\n    const R = containerWidth / 2;\n    // r^2 = (w / 2)^2 + (h - offsetY)^2\n    let scale = 1;\n    if (containerWidth < textWidth) {\n        scale = Math.min(Math.sqrt(Math.abs(Math.pow(R, 2) / (Math.pow(textWidth / 2, 2) + Math.pow(textHeight, 2)))), 1);\n    }\n    const textStyleStr = `width:${containerWidth}px;`;\n    return `<div style=\"${textStyleStr};font-size:${scale}em;line-height:${scale < 1 ? 1 : 'inherit'};\">${text}</div>`;\n}\n\nasync function submitForm(values) {\n\n    let data_static = {}\n    data_static[\"sourceLanguage\"] = \"\"\n    data_static[\"list_contract\"] = []\n    data_static[\"count_risk_of_false_positives\"] = 0\n    data_static[\"count_leve_vulnerabilities\"]= {}\n    data_static[\"count_vulnerabilities\"] = {}\n    const formData = new FormData();\n    formData.append(\"type\", values['type']);\n    formData.append(\"project_name\", values[\"project_name\"]);\n    formData.append(\"list_tool\", values[\"list_tool\"]);\n    const data = {\n        type: values['type'],\n        project_name: values[\"project_name\"]\n    }\n    if (values['type'] === 'file')\n        values[\"file\"].map((file) => {\n            formData.append(\"file\", file.originFileObj);\n            // data.file (\"file\", file.originFileObj);\n        });\n    else\n        formData.append(\"url\", values[\"linkRepo\"]);\n    console.log(\"formData.values()\")\n    console.log(...formData)\n    let check = uploadfile(formData)\n    let res = await axios.post(`${baseUrl}${'/wortwhile/uploadfile'}`, formData)\n        .then((res) => {\n            return {\n                success: true,\n                data: res.data,\n            }\n        })\n        .catch((err) => alert(\"File Upload Error\"));\n    if (res) {\n        console.log(res)\n        let check = await wortwhile(res.data)\n        if (check){\n            let data_static = await combine_results_api(values[\"project_name\"])\n            return data_static.data\n        }\n\n    }\n\n    return data_static\n}\nfunction renderChart(idElement,data,color_data){\n    const piePlot = new Pie(idElement, {\n        appendPadding: 10,\n        data,\n        angleField: 'value',\n        colorField: 'type',\n        radius: 1,\n        innerRadius: 0.64,\n        meta: {\n            value: {\n                formatter: (v) => `${v}`,\n            },\n        },\n        label: {\n            type: 'inner',\n            offset: '-50%',\n            style: {\n                textAlign: 'center',\n            },\n            autoRotate: false,\n            content: '{value}',\n        },\n        statistic: {\n            title: {\n                offsetY: -4,\n                customHtml: (container, view, datum) => {\n                    const { width, height } = container.getBoundingClientRect();\n                    const d = Math.sqrt(Math.pow(width / 2, 2) + Math.pow(height / 2, 2));\n                    const text = datum ? datum.type : 'Total';\n                    return renderStatistic(d, text, { fontSize: 28 });\n                },\n            },\n            content: {\n                offsetY: 4,\n                style: {\n                    fontSize: '32px',\n                },\n                customHtml: (container, view, datum, data) => {\n                    const { width } = container.getBoundingClientRect();\n\n                    const text = datum ? ` ${datum.value}` : ` ${data.reduce((r, d) => r + d.value, 0)}`;\n                    return renderStatistic(width, text, { fontSize: 32 });\n                },\n            },\n        },\n        theme: {\n            colors10: color_data\n        },\n        interactions: [{ type: 'element-selected' }, { type: 'element-active' }, { type: 'pie-statistic-active' }],\n    });\n\n    piePlot.render();\n}\nfunction remove_element_by_id(id) {\n    const myNode = document.getElementById(id);\n    while (myNode.lastElementChild) {\n        myNode.removeChild(myNode.lastElementChild);\n    }\n}\nasync function results(values) {\n    await remove_element_by_id('results')\n    await remove_element_by_id('results-leve')\n    await remove_element_by_id('results-vulnerabilities')\n    await remove_element_by_id('results-rick')\n    console.log(\"results\")\n    console.log(values)\n    console.log(values[\"list_contract\"])\n    console.log(values[\"count_vulnerabilities\"])\n    // let vulnerabilities = JSON.stringify(values[\"count_vulnerabilities\"])\n    // let leve_vulnerabilities = JSON.stringify(values[\"count_leve_vulnerabilities\"])\n    const element = (\n        <div>\n            <h1>Synthesis Results</h1>\n            <div id={\"text1_results\"}>\n                <h2>Project name: {values[\"project_name\"]}.</h2>\n                <h2>Date: {new Date().toLocaleString()}:</h2>\n                <a href={`${baseUrl}${\"/dowloadFile?project_name=\"}${values[\"project_name\"]}`} download>Click to\n                    download synthesis results</a>\n                {/*<h2>Number rick of false positives: {values[\"count_risk_of_false_positives\"]}.</h2>*/}\n                {/*<h2>List vulnerabilities: {vulnerabilities}.</h2>*/}\n                {/*<h2>List leve vulnerabilities: {leve_vulnerabilities}.</h2>*/}\n            </div>\n            <div id={\"text2_results\"}>\n                <h2>List smart contract: </h2>\n                <ul id={\"list_smart_contract\"}/>\n                <h2>Source Language: {values[\"sourceLanguage\"]}.</h2>\n            </div>\n            <div className=\"clear\"/>\n        </div>\n    );\n    let i;\n\n    const data = [\n        {type: 'error', value: values[\"count_leve_vulnerabilities\"][\"error\"]},\n        {type: 'none', value: values[\"count_leve_vulnerabilities\"][\"none\"]},\n        {type: 'note', value: values[\"count_leve_vulnerabilities\"][\"note\"]},\n        {type: 'warning', value: values[\"count_leve_vulnerabilities\"][\"warning\"]},\n    ];\n\n    let data_vaul = []\n    let count = 0\n    for (i = 0; i < values[\"list_vulnerabilities\"].length; i++) {\n        let vaul = values[\"list_vulnerabilities\"][i]\n        let vaul_type;\n        switch (vaul) {\n            case \"ReentrancyVulnerability\":\n                vaul_type = \"Reentrancy\";\n                break;\n            case \"ArithmeticVulnerability\":\n                vaul_type = \"Arithmetic\";\n                break;\n            case \"AccessControlVulnerability\":\n                vaul_type = \"Access control\";\n                break;\n            case \"UncheckedLowCallsVulnerability\":\n                vaul_type = \"Unchecked\";\n                break;\n            case \"DenialServiceVulnerability\":\n                vaul_type = \"Denial Service\";\n                break;\n            case \"TimeManipulationVulnerability\":\n                vaul_type = \"Time Manipulation\";\n                break;\n            case \"IgnoreVulnerability\":\n                vaul_type = \"Ignore\";\n                break;\n            case \"OtherVulnerability\":\n                vaul_type = \"Other\";\n                break;\n            case \"FrontRunningVulnerability\":\n                vaul_type = \"Front Running\";\n                break;\n        }\n        count = count + values[\"count_vulnerabilities\"][vaul]\n        data_vaul.push({type: vaul_type, value: values[\"count_vulnerabilities\"][vaul]})\n    }\n\n    const data_rick = [\n        {type: 'RiskOfFalsePositives', value: values[\"count_risk_of_false_positives\"]},\n        {type: 'Vulnerabilities', value: count - values[\"count_risk_of_false_positives\"]},\n    ];\n    // let color_data;\n    let color_data_leve = [\n        '#FF6B3B',\n        '#082f81',\n        '#6494f9',\n        '#FFC100'\n    ]\n    let color_data_vul = ['#025DF4', '#DB6BCF', '#2498D1', '#BBBDE6', '#4045B2', '#21A97A', '#FF745A', '#007E99', '#FFA8A8', '#2391FF']\n\n\n    await ReactDOM.render(element, document.getElementById('results'));\n    renderChart('results-leve', data, color_data_leve)\n    renderChart('results-vulnerabilities', data_vaul, color_data_vul)\n    renderChart('results-rick', data_rick, color_data_vul)\n    for (i = 0; i < values[\"list_contract\"].length; i++) {\n        var node = document.createElement(\"LI\");   // Create a <li> node\n        var textnode = document.createTextNode(values[\"list_contract\"][i]);         // Create a text node\n        node.appendChild(textnode);     // Append the text to <li>\n        document.getElementById(\"list_smart_contract\").appendChild(node);\n    }\n}\n\nclass MyUpload extends React.Component {\n    state = {\n        loadings: [],\n    };\n\n    handleUpload = ({fileList}) => {\n        console.log(\"vào handleUpload\")\n        //---------------^^^^^----------------\n        // this is equivalent to your \"const img = event.target.files[0]\"\n        // here, antd is giving you an array of files, just like event.target.files\n        // but the structure is a bit different that the original file\n        // the original file is located at the `originFileObj` key of each of this files\n        // so `event.target.files[0]` is actually fileList[0].originFileObj\n        console.log('fileList', fileList);\n\n        // you store them in state, so that you can make a http req with them later\n        this.setState({fileList});\n    };\n    onFinish = async (values) => {\n        console.log(\"onFinish\")\n        console.log(values)\n        console.log(\"vào onFinish\")\n        // this.handleSubmit\n        let data_static = await submitForm(values)\n        this.setState(({loadings}) => {\n            const newLoadings = [...loadings];\n            newLoadings[2] = false;\n\n            return {\n                loadings: newLoadings,\n            };\n        });\n        // let data_static =[]\n        results(data_static)\n    };\n    enterLoading = index => {\n        this.setState(({loadings}) => {\n            const newLoadings = [...loadings];\n            newLoadings[index] = true;\n\n            return {\n                loadings: newLoadings,\n            };\n        });\n        // setTimeout(() => {\n        //     this.setState(({ loadings }) => {\n        //         const newLoadings = [...loadings];\n        //         newLoadings[index] = false;\n        //\n        //         return {\n        //             loadings: newLoadings,\n        //         };\n        //     });\n        // }, 12000);\n    };\n\n    render() {\n        const {loadings} = this.state;\n        return (\n            <div>\n                <Form\n                    name=\"validate_other\"\n                    {...formItemLayout}\n                    onFinish={this.onFinish}\n                    enctype=\"multipart/form-data\"\n                    // onSubmit={this.handleSubmit}\n\n                >\n                    <Form.Item\n                        {...formItemLayout}\n                        name=\"project_name\"\n                        label=\"Your project name\"\n                        rules={[\n                            {\n                                required: true,\n                                message: 'Please input your project name',\n                            },\n                        ]}\n                    >\n                        <Input placeholder=\"Please input your project name\"/>\n                    </Form.Item>\n                    <Form.Item name=\"list_tool\" label=\"Tool\"\n                               rules={[\n                                   {\n                                       required: true,\n                                       message: 'Please choose tool',\n                                   },\n                               ]}>\n                        <Checkbox.Group>\n                            <Row>\n                                {/*<Col span={12}>*/}\n                                <Col>\n                                    <Checkbox\n                                        value=\"mythril\"\n                                        style={{\n                                            lineHeight: '32px',\n                                        }}\n                                    >\n                                        Mythril\n                                    </Checkbox>\n                                </Col>\n                                {/*<Col span={12}>*/}\n                                <Col>\n                                    <Checkbox\n                                        value=\"slither\"\n                                        style={{\n                                            lineHeight: '32px',\n                                        }}\n                                    >\n                                        Slither\n                                    </Checkbox>\n                                </Col>\n                                {/*<Col span={12}>*/}\n                                <Col>\n                                    <Checkbox\n                                        value=\"oyente\"\n                                        style={{\n                                            lineHeight: '32px',\n                                        }}\n                                    >\n                                        Oyente\n                                    </Checkbox>\n                                </Col>\n                                {/*<Col span={12}>*/}\n                                <Col>\n                                    <Checkbox\n                                        value=\"honeybadger\"\n                                        style={{\n                                            lineHeight: '32px',\n                                        }}\n                                    >\n                                        Honeybadger\n                                    </Checkbox>\n                                </Col>\n\n                            </Row>\n                        </Checkbox.Group>\n                    </Form.Item>\n                    <Form.Item\n                        name=\"type\"\n                        label=\"type\"\n                        hasFeedback\n                        rules={[\n                            {\n                                required: true,\n                                message: 'Please input your type',\n                            },\n                        ]}\n                    >\n                        <Select placeholder=\"Please input your type\">\n                            <Option value=\"file\">File</Option>\n                            <Option value=\"repo\">Repo</Option>\n                        </Select>\n                    </Form.Item>\n                    <Form.Item\n                        {...formItemLayout}\n                        name=\"linkRepo\"\n                        label=\"Link Repo\"\n                    >\n                        <Input placeholder=\"Please input link repo\"/>\n                    </Form.Item>\n                    <Form.Item label=\"file\">\n                        <Form.Item name=\"file\" valuePropName=\"fileList\" getValueFromEvent={normFile} noStyle>\n                            <Upload.Dragger name=\"files\" beforeUpload={() => false} fileList={normFile}\n                                            onChange={this.handleUpload}>\n                                <p className=\"ant-upload-drag-icon\">\n                                    <InboxOutlined/>\n                                </p>\n                                <p className=\"ant-upload-text\">Click or drag file to this area to upload</p>\n                                <p className=\"ant-upload-hint\">Support for a single or bulk upload.</p>\n                            </Upload.Dragger>\n                        </Form.Item>\n                    </Form.Item>\n\n                    <Form.Item\n                        wrapperCol={{\n                            span: 24,\n                            offset: 2,\n                        }}\n                    >\n                        <Button type=\"primary\" htmlType=\"submit\" loading={loadings[2]}\n                                onClick={() => this.enterLoading(2)}>\n                            Submit\n                        </Button>\n                    </Form.Item>\n                </Form>\n                <div id={\"results\"}/>\n                <div id={\"result_charts\"} style={{display: '-webkit-box'}}>\n                    <div id={\"results-leve\"} style={{\n                        width: '30%',}}\n                    />\n                    <div id={\"results-vulnerabilities\"}\n                         style={{width: '35%'}}\n                    />\n                    <div id={\"results-rick\"}\n                         style={{width: '35%'}}\n                    />\n                    <div id={\"results-text\"}\n                    />\n                </div>\n            </div>\n        );\n    }\n};\n\nexport default MyUpload",{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","replacedBy":"71"},{"ruleId":"72","severity":1,"message":"73","line":2,"column":10,"nodeType":"74","messageId":"75","endLine":2,"endColumn":16},{"ruleId":"72","severity":1,"message":"76","line":4,"column":8,"nodeType":"74","messageId":"75","endLine":4,"endColumn":16},{"ruleId":"72","severity":1,"message":"77","line":6,"column":8,"nodeType":"74","messageId":"75","endLine":6,"endColumn":20},{"ruleId":"72","severity":1,"message":"78","line":7,"column":8,"nodeType":"74","messageId":"75","endLine":7,"endColumn":12},{"ruleId":"72","severity":1,"message":"79","line":10,"column":12,"nodeType":"74","messageId":"75","endLine":10,"endColumn":23},{"ruleId":"72","severity":1,"message":"80","line":1,"column":10,"nodeType":"74","messageId":"75","endLine":1,"endColumn":13},{"ruleId":"72","severity":1,"message":"81","line":1,"column":16,"nodeType":"74","messageId":"75","endLine":1,"endColumn":24},{"ruleId":"72","severity":1,"message":"82","line":7,"column":5,"nodeType":"74","messageId":"75","endLine":7,"endColumn":16},{"ruleId":"72","severity":1,"message":"83","line":8,"column":5,"nodeType":"74","messageId":"75","endLine":8,"endColumn":11},{"ruleId":"72","severity":1,"message":"84","line":9,"column":5,"nodeType":"74","messageId":"75","endLine":9,"endColumn":10},{"ruleId":"72","severity":1,"message":"85","line":10,"column":5,"nodeType":"74","messageId":"75","endLine":10,"endColumn":11},{"ruleId":"72","severity":1,"message":"86","line":13,"column":5,"nodeType":"74","messageId":"75","endLine":13,"endColumn":9},{"ruleId":"72","severity":1,"message":"87","line":22,"column":30,"nodeType":"74","messageId":"75","endLine":22,"endColumn":40},{"ruleId":"72","severity":1,"message":"88","line":53,"column":15,"nodeType":"74","messageId":"75","endLine":53,"endColumn":19},{"ruleId":"89","severity":1,"message":"90","line":57,"column":35,"nodeType":"91","messageId":"92","endLine":57,"endColumn":37},{"ruleId":"72","severity":1,"message":"93","line":74,"column":17,"nodeType":"74","messageId":"75","endLine":74,"endColumn":22},{"ruleId":"72","severity":1,"message":"81","line":1,"column":16,"nodeType":"74","messageId":"75","endLine":1,"endColumn":24},{"ruleId":"72","severity":1,"message":"82","line":9,"column":5,"nodeType":"74","messageId":"75","endLine":9,"endColumn":16},{"ruleId":"72","severity":1,"message":"83","line":10,"column":5,"nodeType":"74","messageId":"75","endLine":10,"endColumn":11},{"ruleId":"72","severity":1,"message":"84","line":11,"column":5,"nodeType":"74","messageId":"75","endLine":11,"endColumn":10},{"ruleId":"72","severity":1,"message":"85","line":12,"column":5,"nodeType":"74","messageId":"75","endLine":12,"endColumn":11},{"ruleId":"72","severity":1,"message":"86","line":15,"column":5,"nodeType":"74","messageId":"75","endLine":15,"endColumn":9},{"ruleId":"72","severity":1,"message":"94","line":26,"column":7,"nodeType":"74","messageId":"75","endLine":26,"endColumn":21},{"ruleId":"72","severity":1,"message":"88","line":70,"column":11,"nodeType":"74","messageId":"75","endLine":70,"endColumn":15},{"ruleId":"89","severity":1,"message":"90","line":75,"column":35,"nodeType":"91","messageId":"92","endLine":75,"endColumn":37},{"ruleId":"72","severity":1,"message":"93","line":83,"column":9,"nodeType":"74","messageId":"75","endLine":83,"endColumn":14},{"ruleId":"95","severity":1,"message":"96","line":208,"column":9,"nodeType":"97","messageId":"98","endLine":236,"endColumn":10},"no-native-reassign",["99"],"no-negated-in-lhs",["100"],"no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar","'ReactDOM' is defined but never used.","'PicturesWall' is defined but never used.","'Demo' is defined but never used.","'currentTime' is assigned a value but never used.","'Pie' is defined but never used.","'useState' is defined but never used.","'InputNumber' is defined but never used.","'Switch' is defined but never used.","'Radio' is defined but never used.","'Slider' is defined but never used.","'Rate' is defined but never used.","'uploadfile' is defined but never used.","'data' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'check' is assigned a value but never used.","'backend_folder' is assigned a value but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-global-assign","no-unsafe-negation"]